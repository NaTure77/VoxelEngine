// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

struct DataNode
{
    float3 color;
    uint subNodes[8];
};

int level;
uint width;
uint height;

int voxelGap;
float ratio;
RWTexture2D<float4> image;
RWStructuredBuffer<DataNode> octree;
RWBuffer<uint> imageMap;

//(1920 / 8 ) * (1080 / 8)
[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    if (id.x * voxelGap >= width || id.y * voxelGap >= height) return;

    uint imageIdx = (id.y * width + id.x) * 10 *voxelGap;
    uint idx = imageMap[imageIdx + level - 1];
    if (idx == 0) return;
    octree[idx].color = image[id.xy * voxelGap * ratio].xyz;
}
